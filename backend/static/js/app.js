class DrillingJournal {
  constructor() {
    this.dbName = 'DrillingJournal';
    this.dbVersion = 11;
    this.apiBase = '/api';
    this.currentWell = null;
    this.syncInProgress = false;
    this.manualOfflineMode = false;
    this.init();
  }

  async init() {
    await this.initDB();
    this.setupEventListeners();
    this.loadWells();
    this.checkConnection();
    this.setupAutoSync();
    this.setupManualOfflineToggle();
  }

  // –ù–û–í–´–ô –ú–ï–¢–û–î - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä—É—á–Ω–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –æ—Ñ–ª–∞–π–Ω
  setupManualOfflineToggle() {
    const toggleBtn = document.getElementById('toggle-offline');
    if (toggleBtn) {
      toggleBtn.addEventListener('click', () => {
        this.toggleManualOfflineMode();
      });
    }
  }

  // –ù–û–í–´–ô –ú–ï–¢–û–î - –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä—É—á–Ω–æ–≥–æ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞
  toggleManualOfflineMode() {
    this.manualOfflineMode = !this.manualOfflineMode;
    const toggleBtn = document.getElementById('toggle-offline');
    const statusElement = document.getElementById('connection-status');

    if (this.manualOfflineMode) {
      // –í–∫–ª—é—á–∞–µ–º —Ä—É—á–Ω–æ–π –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º
      toggleBtn.classList.add('offline');
      toggleBtn.title = '–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤ –æ–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º';
      statusElement.textContent = 'üî¥ –†—É—á–Ω–æ–π –æ—Ñ–ª–∞–π–Ω';
      statusElement.className = 'connection-status offline';
      this.showMessage('üì¥ –í–∫–ª—é—á–µ–Ω —Ä—É—á–Ω–æ–π –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º', 'info');
    } else {
      // –í—ã–∫–ª—é—á–∞–µ–º —Ä—É—á–Ω–æ–π –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º
      toggleBtn.classList.remove('offline');
      toggleBtn.title = '–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º';
      this.updateConnectionStatus(); // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
      this.showMessage('üåê –í–∫–ª—é—á–µ–Ω –æ–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º', 'info');
    }

    console.log('üîß –†—É—á–Ω–æ–π —Ä–µ–∂–∏–º –æ—Ñ–ª–∞–π–Ω:', this.manualOfflineMode);
  }

  // –ú–ï–¢–û–î –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò –ë–ê–ó–´ –î–ê–ù–ù–´–•
  async initDB() {
    return new Promise((resolve, reject) => {
      const request = indexedDB.open(this.dbName, this.dbVersion);

      request.onerror = () => reject(request.error);
      request.onsuccess = () => {
        this.db = request.result;
        console.log('‚úÖ –ë–î –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        resolve();
      };

      request.onupgradeneeded = (event) => {
        const db = event.target.result;
        console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î –¥–æ –≤–µ—Ä—Å–∏–∏:', event.newVersion);

        if (!db.objectStoreNames.contains('wells')) {
          const wellStore = db.createObjectStore('wells', { keyPath: 'id' });
          wellStore.createIndex('name', 'name', { unique: false });
        }

        if (!db.objectStoreNames.contains('layers')) {
          const layerStore = db.createObjectStore('layers', { keyPath: 'id' });
          layerStore.createIndex('wellId', 'wellId', { unique: false });
        }
      };
    });
  }

  // –ú–ï–¢–û–î –ù–ê–°–¢–†–û–ô–ö–ò –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í –°–û–ë–´–¢–ò–ô
  setupEventListeners() {
    console.log('üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π');

    // –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫–≤–∞–∂–∏–Ω—ã
    const wellForm = document.getElementById('new-well-form');
    if (wellForm) {
      wellForm.addEventListener('submit', (e) => {
        e.preventDefault();
        this.createWell(new FormData(e.target));
      });
    }

    // –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ—è
    const layerForm = document.getElementById('new-layer-form');
    if (layerForm) {
      layerForm.addEventListener('submit', (e) => {
        e.preventDefault();
        this.createLayer(new FormData(e.target));
      });
    }

    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
  }

  // –ú–ï–¢–û–î –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò
  setupAutoSync() {
    window.addEventListener('online', async () => {
      console.log('üåê –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –ø–æ—è–≤–∏–ª—Å—è, –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...');
      await this.syncData();
    });
  }

  // –ú–ï–¢–û–î –°–û–•–†–ê–ù–ï–ù–ò–Ø –í –õ–û–ö–ê–õ–¨–ù–£–Æ –ë–î
  async saveToLocalDB(storeName, data) {
    return new Promise((resolve, reject) => {
      const transaction = this.db.transaction([storeName], 'readwrite');
      const store = transaction.objectStore(storeName);

      const itemWithId = {
        ...data,
        id: data.id || `local_${Date.now()}`,
        synced: data.synced || false,
        localSaveTime: new Date().toISOString()
      };

      console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ ${storeName}:`, itemWithId.name || itemWithId.id);
      const request = store.put(itemWithId);

      request.onsuccess = () => resolve(itemWithId);
      request.onerror = (e) => {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ ${storeName}:`, e);
        reject(e);
      };
    });
  }

  // –ú–ï–¢–û–î –£–î–ê–õ–ï–ù–ò–Ø –ò–ó –õ–û–ö–ê–õ–¨–ù–û–ô –ë–î
  async deleteFromLocalDB(storeName, id) {
    return new Promise((resolve, reject) => {
      const transaction = this.db.transaction([storeName], 'readwrite');
      const store = transaction.objectStore(storeName);
      const request = store.delete(id);

      request.onsuccess = () => {
        console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω –∏–∑ ${storeName}:`, id);
        resolve();
      };
      request.onerror = (e) => {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ ${storeName}:`, e);
        reject(e);
      };
    });
  }

  // –ú–ï–¢–û–î –ó–ê–ì–†–£–ó–ö–ò –ò–ó –õ–û–ö–ê–õ–¨–ù–û–ô –ë–î
  async loadFromLocalDB(storeName) {
    return new Promise((resolve, reject) => {
      const transaction = this.db.transaction([storeName], 'readonly');
      const store = transaction.objectStore(storeName);
      const request = store.getAll();

      request.onsuccess = () => resolve(request.result);
      request.onerror = (e) => {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ ${storeName}:`, e);
        reject(e);
      };
    });
  }

  // –ú–ï–¢–û–î –ó–ê–ì–†–£–ó–ö–ò –°–ö–í–ê–ñ–ò–ù
  async loadWells() {
    // –ï–°–õ–ò –û–§–õ–ê–ô–ù - –°–†–ê–ó–£ –ì–†–£–ó–ò–ú –ò–ó –õ–û–ö–ê–õ–¨–ù–û–ô –ë–î
    if (!this.isOnline()) {
      console.log('üì¥ –û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º - –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–∫–≤–∞–∂–∏–Ω—ã –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î');
      const localWells = await this.loadFromLocalDB('wells');
      console.log('üìÇ –ù–∞–π–¥–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Å–∫–≤–∞–∂–∏–Ω:', localWells.length);
      this.renderWells(localWells);
      return;
    }

    // –ï–°–õ–ò –û–ù–õ–ê–ô–ù - –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–∞
    try {
      const response = await fetch(`${this.apiBase}/wells/`);
      if (!response.ok) throw new Error('HTTP error');

      const wells = await response.json();
      console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å —Å–µ—Ä–≤–µ—Ä–∞:', wells.length, '—Å–∫–≤–∞–∂–∏–Ω');

      for (const well of wells) {
        await this.saveToLocalDB('wells', {
          ...well,
          synced: true
        });
      }

      this.renderWells(wells);
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫–≤–∞–∂–∏–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
      const localWells = await this.loadFromLocalDB('wells');
      this.renderWells(localWells);
    }
  }

  // –ú–ï–¢–û–î –°–û–ó–î–ê–ù–ò–Ø –°–ö–í–ê–ñ–ò–ù–´
  async createWell(formData) {
    const wellData = {
      name: formData.get('name'),
      area: formData.get('area'),
      structure: formData.get('structure'),
      planned_depth: parseFloat(formData.get('planned_depth')) || 0
    };

    // –ü–†–û–í–ï–†–Ø–ï–ú –û–ù–õ–ê–ô–ù –°–¢–ê–¢–£–°
    if (navigator.onLine) {
      try {
        const response = await fetch(`${this.apiBase}/wells/`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(wellData)
        });

        if (response.ok) {
          const savedWell = await response.json();
          await this.saveToLocalDB('wells', {
            ...savedWell,
            synced: true
          });
          this.showMessage('‚úÖ –°–∫–≤–∞–∂–∏–Ω–∞ —Å–æ–∑–¥–∞–Ω–∞!', 'success');
          showPage('home-page');
          this.loadWells();
          return;
        }
      } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–Ω–ª–∞–π–Ω —Å–æ–∑–¥–∞–Ω–∏–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ');
      }
    }

    // –û–§–õ–ê–ô–ù –†–ï–ñ–ò–ú –ò–õ–ò –û–®–ò–ë–ö–ê –û–ù–õ–ê–ô–ù
    console.log('üì¥ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫–≤–∞–∂–∏–Ω—É –ª–æ–∫–∞–ª—å–Ω–æ');
    const localWell = await this.saveToLocalDB('wells', {
      ...wellData,
      id: `local_well_${Date.now()}`,
      created_at: new Date().toISOString(),
      created_by: { username: 'local_user' },
      synced: false
    });

    this.showMessage('üíæ –°–∫–≤–∞–∂–∏–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ', 'info');
    showPage('home-page');
    this.loadWells();
  }

  // –ú–ï–¢–û–î –°–û–ó–î–ê–ù–ò–Ø –°–õ–û–Ø - –° –û–¢–õ–ê–î–ö–û–ô
  async createLayer(formData) {
    const wellIdInput = formData.get('well_id');
    console.log('üîç DEBUG createLayer - wellId from form:', wellIdInput, 'type:', typeof wellIdInput);

    const wellId = wellIdInput.toString(); // –í—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–µ–º —Å–æ —Å—Ç—Ä–æ–∫–æ–π
    const depthFrom = parseFloat(formData.get('depth_from'));
    const depthTo = parseFloat(formData.get('depth_to'));

    console.log('üîç DEBUG - parsed wellId:', wellId, 'depthFrom:', depthFrom, 'depthTo:', depthTo);

    const layerData = {
      well: wellId,
      wellId: wellId,
      depth_from: depthFrom,
      depth_to: depthTo,
      lithology: formData.get('lithology'),
      description: formData.get('description'),
      layer_number: 1,
      thickness: (depthTo - depthFrom).toFixed(2)
    };

    console.log('üîç DEBUG - layerData:', layerData);

    if (navigator.onLine) {
      console.log('üåê –û–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
      try {
        // –î–ª—è –æ–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º wellId –∫–∞–∫ —á–∏—Å–ª–æ (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ª–æ–∫–∞–ª—å–Ω–∞—è —Å–∫–≤–∞–∂–∏–Ω–∞)
        const sendData = {
          ...layerData,
          well: wellId.startsWith('local_') ? null : parseInt(wellId) // –°–µ—Ä–≤–µ—Ä –æ–∂–∏–¥–∞–µ—Ç —á–∏—Å–ª–æ –∏–ª–∏ null
        };

        console.log('üîç DEBUG - sending to server:', sendData);

        const response = await fetch(`${this.apiBase}/layers/`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(sendData)
        });

        if (response.ok) {
          const savedLayer = await response.json();
          await this.saveToLocalDB('layers', {
            ...savedLayer,
            wellId: savedLayer.well,
            synced: true
          });
          this.showMessage('‚úÖ –°–ª–æ–π –¥–æ–±–∞–≤–ª–µ–Ω!', 'success');
          document.getElementById('new-layer-form').reset();
          await this.loadWellLayers(wellId);
          return;
        }
      } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–Ω–ª–∞–π–Ω –æ—Ç–ø—Ä–∞–≤–∫–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ');
      }
    }

    // –û–§–õ–ê–ô–ù –†–ï–ñ–ò–ú –ò–õ–ò –û–®–ò–ë–ö–ê –û–ù–õ–ê–ô–ù
    console.log('üì¥ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ–π –ª–æ–∫–∞–ª—å–Ω–æ');
    await this.saveLayerOffline(layerData, wellId);
  }

  // –ú–ï–¢–û–î –°–û–•–†–ê–ù–ï–ù–ò–Ø –°–õ–û–Ø –û–§–§–õ–ê–ô–ù
  async saveLayerOffline(layerData, wellId) {
    const localLayer = await this.saveToLocalDB('layers', {
      ...layerData,
      id: `local_layer_${Date.now()}`,
      created_at: new Date().toISOString(),
      synced: false
    });

    console.log('üíæ –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–ª–æ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', localLayer);
    this.showMessage('üíæ –°–ª–æ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ', 'info');
    document.getElementById('new-layer-form').reset();

    // –û–ë–ù–û–í–õ–Ø–ï–ú –ò–ù–¢–ï–†–§–ï–ô–° –ë–ï–ó –ó–ê–ü–†–û–°–ê –ö –°–ï–†–í–ï–†–£
    await this.updateLayersUI(wellId);
  }

  // –ú–ï–¢–û–î –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ò–ù–¢–ï–†–§–ï–ô–°–ê –°–õ–û–ï–í - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô
  async updateLayersUI(wellId) {
    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è —Å–∫–≤–∞–∂–∏–Ω—ã:', wellId);

    const allLayers = await this.loadFromLocalDB('layers');
    const wellLayers = allLayers.filter(layer => {
      // –ü–†–ï–û–ë–†–ê–ó–£–ï–ú –í–°–ï ID –ö –°–¢–†–û–ö–ê–ú –î–õ–Ø –°–†–ê–í–ù–ï–ù–ò–Ø
      const layerWellId = layer.well ? layer.well.toString() : null;
      const layerWellIdAlt = layer.wellId ? layer.wellId.toString() : null;
      const targetWellId = wellId.toString();

      return layerWellId === targetWellId || layerWellIdAlt === targetWellId;
    });

    console.log(`üéØ –û—Ç–æ–±—Ä–∞–∂–∞–µ–º ${wellLayers.length} —Å–ª–æ–µ–≤ –¥–ª—è —Å–∫–≤–∞–∂–∏–Ω—ã ${wellId}`);
    this.renderLayers(wellLayers);
  }

  // –ú–ï–¢–û–î –ó–ê–ì–†–£–ó–ö–ò –°–õ–û–ï–í –°–ö–í–ê–ñ–ò–ù–´
  async loadWellLayers(wellId) {
    const wellIdStr = wellId.toString();
    console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–æ–µ–≤ –¥–ª—è —Å–∫–≤–∞–∂–∏–Ω—ã:', wellIdStr);

    if (!this.isOnline()) {
      console.log('üì¥ –û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º - –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î');
      await this.updateLayersUI(wellIdStr);
      return;
    }

    try {
      const response = await fetch(`${this.apiBase}/layers/?well_id=${wellIdStr}`);
      if (!response.ok) throw new Error('HTTP error');

      const serverLayers = await response.json();
      console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–ª–æ–µ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞:', serverLayers.length);

      for (const layer of serverLayers) {
        await this.saveToLocalDB('layers', {
          ...layer,
          wellId: layer.well,
          synced: true
        });
      }

      const allLocalLayers = await this.loadFromLocalDB('layers');
      const localUnsyncedLayers = allLocalLayers.filter(layer => {
        const layerWellId = layer.well ? layer.well.toString() : null;
        const layerWellIdAlt = layer.wellId ? layer.wellId.toString() : null;
        return (layerWellId === wellIdStr || layerWellIdAlt === wellIdStr) && !layer.synced;
      });

      const allLayers = [...serverLayers, ...localUnsyncedLayers];
      console.log(`üéØ –í—Å–µ–≥–æ —Å–ª–æ–µ–≤: ${allLayers.length} (${serverLayers.length} —Å —Å–µ—Ä–≤–µ—Ä–∞ + ${localUnsyncedLayers.length} –ª–æ–∫–∞–ª—å–Ω—ã—Ö)`);

      this.renderLayers(allLayers);

    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
      await this.updateLayersUI(wellIdStr);
    }
  }

  // –ú–ï–¢–û–î –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –î–ê–ù–ù–´–•
  async syncData() {
    if (this.syncInProgress) {
      console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è');
      return;
    }

    this.syncInProgress = true;
    this.showMessage('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...', 'info');

    try {
      // –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –°–ö–í–ê–ñ–ò–ù
      const localWells = await this.loadFromLocalDB('wells');
      const unsyncedWells = localWells.filter(well => !well.synced && well.id.toString().startsWith('local_'));

      for (const well of unsyncedWells) {
        await this.syncWell(well);
      }

      // –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –°–õ–û–ï–í
      const localLayers = await this.loadFromLocalDB('layers');
      const unsyncedLayers = localLayers.filter(layer => !layer.synced && layer.id.toString().startsWith('local_'));

      for (const layer of unsyncedLayers) {
        await this.syncLayer(layer);
      }

      // –ü–ï–†–ï–ó–ê–ì–†–£–ñ–ê–ï–ú –î–ê–ù–ù–´–ï –° –°–ï–†–í–ï–†–ê
      await this.loadWells();
      if (this.currentWell) {
        await this.loadWellLayers(this.currentWell);
      }

      this.showMessage('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!', 'success');

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
      this.showMessage('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏', 'error');
    } finally {
      this.syncInProgress = false;
    }
  }

  // –ú–ï–¢–û–î –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –°–ö–í–ê–ñ–ò–ù–´
  async syncWell(localWell) {
    try {
      const wellData = {
        name: localWell.name,
        area: localWell.area,
        structure: localWell.structure,
        planned_depth: localWell.planned_depth
      };

      const response = await fetch(`${this.apiBase}/wells/`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(wellData)
      });

      if (response.ok) {
        const serverWell = await response.json();

        // –û–ë–ù–û–í–õ–Ø–ï–ú –õ–û–ö–ê–õ–¨–ù–£–Æ –ó–ê–ü–ò–°–¨
        await this.saveToLocalDB('wells', {
          ...serverWell,
          synced: true
        });

        console.log('‚úÖ –°–∫–≤–∞–∂–∏–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞:', serverWell.name);

        // –û–ë–ù–û–í–õ–Ø–ï–ú –°–õ–û–ò –≠–¢–û–ô –°–ö–í–ê–ñ–ò–ù–´
        await this.updateLayersWellId(localWell.id, serverWell.id);

      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–∫–≤–∞–∂–∏–Ω—ã:', localWell.name, error);
      throw error;
    }
  }

  // –ú–ï–¢–û–î –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –°–õ–û–Ø
  async syncLayer(localLayer) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π wellId
      const wells = await this.loadFromLocalDB('wells');
      const originalWell = wells.find(w => w.id === localLayer.originalWellId || w.id === localLayer.wellId);
      const actualWellId = originalWell?.synced ? originalWell.id : localLayer.well;

      const layerData = {
        well: actualWellId,
        depth_from: localLayer.depth_from,
        depth_to: localLayer.depth_to,
        lithology: localLayer.lithology,
        description: localLayer.description,
        layer_number: localLayer.layer_number
      };

      const response = await fetch(`${this.apiBase}/layers/`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(layerData)
      });

      if (response.ok) {
        const serverLayer = await response.json();

        // –£–î–ê–õ–Ø–ï–ú –°–¢–ê–†–´–ô –õ–û–ö–ê–õ–¨–ù–´–ô –°–õ–û–ô –ü–ï–†–ï–î –°–û–•–†–ê–ù–ï–ù–ò–ï–ú –ù–û–í–û–ì–û
        await this.deleteFromLocalDB('layers', localLayer.id);

        // –°–û–•–†–ê–ù–Ø–ï–ú –ù–û–í–´–ô –°–ò–ù–•–†–û–ù–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –°–õ–û–ô
        await this.saveToLocalDB('layers', {
          ...serverLayer,
          wellId: serverLayer.well,
          synced: true
        });

        console.log('‚úÖ –°–ª–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –∑–∞–º–µ–Ω–µ–Ω:', localLayer.id, '‚Üí', serverLayer.id);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–ª–æ—è:', localLayer.id, error);
      throw error;
    }
  }

  // –ú–ï–¢–û–î –û–ë–ù–û–í–õ–ï–ù–ò–Ø wellId –í –°–õ–û–Ø–•
  async updateLayersWellId(oldWellId, newWellId) {
    const allLayers = await this.loadFromLocalDB('layers');
    const layersToUpdate = allLayers.filter(layer =>
      (layer.well === oldWellId || layer.wellId === oldWellId) && !layer.synced
    );

    for (const layer of layersToUpdate) {
      await this.saveToLocalDB('layers', {
        ...layer,
        well: newWellId,
        wellId: newWellId,
        originalWellId: oldWellId
      });
    }

    console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${layersToUpdate.length} —Å–ª–æ–µ–≤ –¥–ª—è –Ω–æ–≤–æ–π —Å–∫–≤–∞–∂–∏–Ω—ã ${newWellId}`);
  }

  // –ú–ï–¢–û–î –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –°–ö–í–ê–ñ–ò–ù
  renderWells(wells) {
    const container = document.getElementById('wells-list');

    if (!wells || wells.length === 0) {
      container.innerHTML = `
            <div class="empty-state">
                <p>üìù –ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–∫–≤–∞–∂–∏–Ω</p>
                <p><small>–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —Å–∫–≤–∞–∂–∏–Ω—É</small></p>
            </div>
        `;
      return;
    }

    container.innerHTML = wells.map(well => `
        <div class="well-card" onclick="app.showWorkPage('${well.id}')">
            <h3>${well.name}</h3>
            <div class="well-meta">
                <p>üìç ${well.area}</p>
                ${well.structure ? `<p>üèóÔ∏è ${well.structure}</p>` : ''}
                ${well.planned_depth ? `<p>üìè ${well.planned_depth} –º</p>` : ''}
                ${!well.synced ? '<p><small>üíæ –õ–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è</small></p>' : ''}
            </div>
            <small>üìÖ ${new Date(well.created_at || well.localSaveTime).toLocaleDateString('ru-RU')}</small>
        </div>
    `).join('');
  }

  // –ú–ï–¢–û–î –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –°–õ–û–ï–í
  renderLayers(layers) {
    const container = document.getElementById('layers-list');

    if (!layers || layers.length === 0) {
      container.innerHTML = `
                <div class="empty-state">
                    <p>üìù –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–ª–æ–µ–≤</p>
                    <p><small>–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Å–ª–æ–π</small></p>
                </div>
            `;
      return;
    }

    layers.sort((a, b) => parseFloat(a.depth_from) - parseFloat(b.depth_from));

    container.innerHTML = layers.map(layer => `
            <div class="layer-item">
                <div class="layer-info">
                    <div class="layer-depth">
                        ${layer.depth_from} - ${layer.depth_to} –º
                    </div>
                    <div class="layer-lithology">
                        <span class="lithology-badge ${layer.lithology}">
                            ${this.getLithologyDisplay(layer.lithology)}
                        </span>
                        ${layer.description || ''}
                        ${!layer.synced ? ' <small>üíæ</small>' : ''}
                    </div>
                </div>
                <div class="layer-thickness">
                    ${layer.thickness || this.calculateThickness(layer.depth_from, layer.depth_to)} –º
                </div>
            </div>
        `).join('');
  }

  // –ú–ï–¢–û–î –†–ê–°–ß–ï–¢–ê –ú–û–©–ù–û–°–¢–ò –°–õ–û–Ø
  calculateThickness(depthFrom, depthTo) {
    if (depthFrom && depthTo) {
      return (parseFloat(depthTo) - parseFloat(depthFrom)).toFixed(2);
    }
    return '0.00';
  }

  // –ú–ï–¢–û–î –ü–û–õ–£–ß–ï–ù–ò–Ø –û–¢–û–ë–†–ê–ñ–ê–ï–ú–û–ì–û –ù–ê–ó–í–ê–ù–ò–Ø –õ–ò–¢–û–õ–û–ì–ò–ò
  getLithologyDisplay(lithology) {
    const lithologyMap = {
      'prs': 'üü´ –ü–†–°',
      'peat': 'üü§ –¢–æ—Ä—Ñ',
      'sand': 'üü° –ü–µ—Å–æ–∫',
      'loam': 'üîµ –°—É–≥–ª–∏–Ω–æ–∫',
      'sandy_loam': 'üü† –°—É–ø–µ—Å—å'
    };
    return lithologyMap[lithology] || lithology;
  }

  // –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º —Ä—É—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
  checkConnection() {
    const statusElement = document.getElementById('connection-status');

    const updateStatus = () => {
      if (this.manualOfflineMode) {
        // –†—É—á–Ω–æ–π –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
        statusElement.textContent = 'üî¥ –†—É—á–Ω–æ–π –æ—Ñ–ª–∞–π–Ω';
        statusElement.className = 'connection-status offline';
      } else {
        // –†–µ–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        this.updateConnectionStatus();
      }
    };

    updateStatus();
    window.addEventListener('online', updateStatus);
    window.addEventListener('offline', updateStatus);
  }

  // –ù–û–í–´–ô –ú–ï–¢–û–î - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  updateConnectionStatus() {
    const statusElement = document.getElementById('connection-status');
    if (navigator.onLine) {
      statusElement.textContent = 'üü¢ –û–Ω–ª–∞–π–Ω';
      statusElement.className = 'connection-status online';
    } else {
      statusElement.textContent = 'üî¥ –û—Ñ–ª–∞–π–Ω';
      statusElement.className = 'connection-status offline';
    }
  }

  // –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î - –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞ —Å —É—á–µ—Ç–æ–º —Ä—É—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
  isOnline() {
    return !this.manualOfflineMode && navigator.onLine;
  }

  // –ú–ï–¢–û–î –ü–û–ö–ê–ó–ê –°–û–û–ë–©–ï–ù–ò–ô
  showMessage(text, type = 'info') {
    if (typeof showToast === 'function') {
      showToast(text, type);
    } else {
      // Fallback –Ω–∞ alert –µ—Å–ª–∏ toast –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω
      console.log(`${type.toUpperCase()}: ${text}`);
    }
  }

  // –ú–ï–¢–û–î –≠–ö–°–ü–û–†–¢–ê –î–ê–ù–ù–´–•
  async exportData() {
    this.showMessage('–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö...', 'info');
  }

  // –ú–ï–¢–û–î –ü–ï–†–ï–•–û–î–ê –ù–ê –°–¢–†–ê–ù–ò–¶–£ –†–ê–ë–û–¢–´ –°–û –°–ö–í–ê–ñ–ò–ù–û–ô
  async showWorkPage(wellId) {
    this.currentWell = wellId;

    // –£–ë–ï–ñ–î–ê–ï–ú–°–Ø –ß–¢–û wellId - –°–¢–†–û–ö–ê –î–õ–Ø –°–†–ê–í–ù–ï–ù–ò–Ø
    const wellIdStr = wellId.toString();
    document.getElementById('current-well-id').value = wellIdStr;

    await this.loadWellDetails(wellIdStr);
    await this.loadWellLayers(wellIdStr);
    showPage('work-page');
  }

  // –ú–ï–¢–û–î –ó–ê–ì–†–£–ó–ö–ò –î–ï–¢–ê–õ–ï–ô –°–ö–í–ê–ñ–ò–ù–´ - –û–ë–ù–û–í–õ–ï–ù–ù–´–ô
  async loadWellDetails(wellId) {
    const wellIdStr = wellId.toString();

    // –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ this.isOnline()
    if (!wellIdStr.startsWith('local_') && !isNaN(wellIdStr) && this.isOnline()) {
      try {
        const response = await fetch(`${this.apiBase}/wells/${wellIdStr}/`);
        const well = await response.json();

        document.getElementById('working-well-name').textContent = well.name;
        document.getElementById('working-well-info').textContent = `${well.area} ‚Ä¢ ${well.structure || ''}`;
        document.getElementById('current-well-name').textContent = well.name;
        return;
      } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞, –ø—Ä–æ–±—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ');
      }
    }

    // –î–õ–Ø –õ–û–ö–ê–õ–¨–ù–´–• –°–ö–í–ê–ñ–ò–ù –ò–õ–ò –ü–†–ò –û–®–ò–ë–ö–ï - –ò–©–ï–ú –í –õ–û–ö–ê–õ–¨–ù–û–ô –ë–î
    console.log('üîç –ò—â–µ–º —Å–∫–≤–∞–∂–∏–Ω—É –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î:', wellIdStr);
    const localWells = await this.loadFromLocalDB('wells');
    const well = localWells.find(w => w.id.toString() === wellIdStr);

    if (well) {
      document.getElementById('working-well-name').textContent = well.name;
      document.getElementById('working-well-info').textContent = `${well.area} ‚Ä¢ ${well.structure || ''}`;
      document.getElementById('current-well-name').textContent = well.name;
      console.log('‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è —Å–∫–≤–∞–∂–∏–Ω–∞ –Ω–∞–π–¥–µ–Ω–∞:', well.name);
    } else {
      console.error('‚ùå –°–∫–≤–∞–∂–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', wellIdStr);
      this.showMessage('‚ùå –°–∫–≤–∞–∂–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'error');
    }
  }
}

// –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
function showPage(pageId) {
  document.querySelectorAll('.page').forEach(page => {
    page.classList.remove('active');
  });
  document.getElementById(pageId).classList.add('active');
}

function syncData() {
  app.syncData();
}

function exportData() {
  app.exportData();
}

// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
let app;
document.addEventListener('DOMContentLoaded', () => {
  app = new DrillingJournal();
});